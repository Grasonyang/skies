/**
 * useScenarioStudio Hook 單元測試
 * 
 * ⚠️ 此文件暫時停用 - 測試庫未安裝
 * 
 * 要啟用此文件：
 * 1. 安裝測試依賴: npm install -D vitest @testing-library/react @testing-library/jest-dom
 * 2. 取消註解下方的程式碼
 * 3. 執行測試: npm test
 * 
 * 詳細說明請參考：.docs/dev-tools-setup.md
 */

// @ts-nocheck
/* eslint-disable */

// 暫時註解以避免編譯錯誤
// import { describe, it, expect, vi, beforeEach } from 'vitest';
// import { renderHook, waitFor } from '@testing-library/react';
// import { useScenarioStudio } from '@/hooks/useScenarioStudio';

export {};

// Mock fetch
global.fetch = vi.fn();

describe('useScenarioStudio', () => {
  beforeEach(() => {
    vi.clearAllMocks();
  });

  it('should initialize with empty scenarios', () => {
    const { result } = renderHook(() => useScenarioStudio());

    expect(result.current.scenarios).toEqual([]);
    expect(result.current.loading).toBe(false);
    expect(result.current.error).toBeNull();
  });

  it('should generate scenario successfully', async () => {
    // Mock Places API response
    const mockPlaces = [
      {
        name: '大安森林公園',
        location: { lat: 25.033964, lng: 121.543987 },
        types: ['park'],
        address: '台北市大安區新生南路二段1號',
      },
    ];

    // Mock AQI forecast response
    const mockForecast = {
      hourlyForecasts: Array.from({ length: 24 }, (_, i) => ({
        dateTime: new Date(Date.now() + i * 3600000).toISOString(),
        indexes: [
          {
            code: 'uaqi',
            aqi: 50 + i * 2,
            category: 'MODERATE',
            dominantPollutant: 'pm25',
          },
        ],
        pollutants: [],
      })),
      location: { latitude: 25.033964, longitude: 121.543987 },
      meta: {
        baseAqi: 50,
        averageAqi: 60,
        confidenceScore: 85,
        confidenceLevel: '高',
        confidenceDescription: '預測可信度高',
        volatility: 10,
        method: 'simulated',
      },
    };

    (global.fetch as any).mockImplementation((url: string) => {
      if (url.includes('/api/places/nearby')) {
        return Promise.resolve({
          ok: true,
          json: () => Promise.resolve({ places: mockPlaces }),
        });
      }
      if (url.includes('/api/air-quality/forecast')) {
        return Promise.resolve({
          ok: true,
          json: () => Promise.resolve(mockForecast),
        });
      }
      if (url.includes('/api/agent/recommendation')) {
        return Promise.resolve({
          ok: true,
          json: () =>
            Promise.resolve({
              recommendation: 'Test recommendation',
              source: 'gemini',
              confidence: 0.9,
            }),
        });
      }
      return Promise.reject(new Error('Unknown URL'));
    });

    const { result } = renderHook(() => useScenarioStudio());

    // Generate scenario
    await result.current.generateScenario('戶外跑步', { lat: 25.033, lng: 121.565 }, ['park']);

    await waitFor(
      () => {
        expect(result.current.scenarios.length).toBeGreaterThan(0);
      },
      { timeout: 5000 }
    );

    const scenario = result.current.scenarios[0];
    expect(scenario.activity).toBe('戶外跑步');
    expect(scenario.location.name).toBe('大安森林公園');
    expect(scenario.timeSlots.length).toBeGreaterThan(0);
  });

  it('should clear scenarios', async () => {
    const { result } = renderHook(() => useScenarioStudio());

    // Mock some scenarios
    (global.fetch as any).mockResolvedValue({
      ok: true,
      json: () =>
        Promise.resolve({
          places: [
            {
              name: 'Test Place',
              location: { lat: 25.033, lng: 121.565 },
              types: ['park'],
            },
          ],
        }),
    });

    await result.current.generateScenario('測試', { lat: 25.033, lng: 121.565 });

    // Clear scenarios
    result.current.clearScenarios();

    expect(result.current.scenarios).toEqual([]);
    expect(result.current.error).toBeNull();
  });

  it('should handle API error gracefully', async () => {
    (global.fetch as any).mockRejectedValue(new Error('API Error'));

    const { result } = renderHook(() => useScenarioStudio());

    await result.current.generateScenario('測試', { lat: 25.033, lng: 121.565 });

    await waitFor(() => {
      expect(result.current.error).toBeTruthy();
    });
  });
});
