import { NextRequest, NextResponse } from 'next/server';

export const runtime = 'nodejs';

interface NearbyPlacesRequest {
  location: {
    latitude: number;
    longitude: number;
  };
  radius?: number;
  type?: string[];
  languageCode?: string;
}

/**
 * Google Places API (New) - Nearby Search ‰ª£ÁêÜ
 * ‰æùÊìöÊ¥ªÂãïÈ°ûÂûãÊäìÂèñÂ†¥ÂüüÂ∫ßÊ®ô
 */
export async function POST(request: NextRequest) {
  try {
    const body: NearbyPlacesRequest = await request.json();
    const { location, radius = 5000, type = [], languageCode = 'zh-TW' } = body;

    if (!location?.latitude || !location?.longitude) {
      return NextResponse.json(
        { error: 'Áº∫Â∞ëÂøÖË¶ÅÁöÑ‰ΩçÁΩÆÂèÉÊï∏' },
        { status: 400 }
      );
    }

    const apiKey = process.env.GOOGLE_API_KEY;
    if (!apiKey) {
      console.warn('‚ö†Ô∏è GOOGLE_API_KEY Êú™Ë®≠ÂÆöÔºåËøîÂõûÊ®°Êì¨ÈôÑËøëÂ†¥ÂüüË≥áÊñô');
      const mockPlaces = buildMockPlaces(location, type);
      return NextResponse.json(
        {
          places: mockPlaces,
          count: mockPlaces.length,
          source: 'mock',
        },
        { status: 200 }
      );
    }

    console.log(`üîç Places API Ë´ãÊ±Ç: ${location.latitude}, ${location.longitude}, radius: ${radius}m, types: ${type.join(', ')}`);

    // ‰ΩøÁî® Places API (New) - Nearby Search
    const url = `https://places.googleapis.com/v1/places:searchNearby`;

    const requestBody = {
      locationRestriction: {
        circle: {
          center: {
            latitude: location.latitude,
            longitude: location.longitude,
          },
          radius: radius,
        },
      },
      includedTypes: type,
      languageCode: languageCode,
      maxResultCount: 10,
    };

    const response = await fetch(url, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-Goog-Api-Key': apiKey,
        'X-Goog-FieldMask': 'places.displayName,places.location,places.types,places.formattedAddress,places.rating',
      },
      body: JSON.stringify(requestBody),
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error('‚ùå Places API ÈåØË™§:', response.status, errorText);
      
      // Êèê‰æõÊõ¥ÊúâÁî®ÁöÑÈåØË™§Ë®äÊÅØ
      let errorMessage = `Places API Ë´ãÊ±ÇÂ§±Êïó: ${response.status}`;
      
      if (response.status === 403) {
        errorMessage = 'Places API Êú™ÂïüÁî®Êàñ API Key ÁÑ°Ê¨äÈôê„ÄÇË´ãÂà∞ Google Cloud Console ÂïüÁî® Places API (New)';
      } else if (response.status === 400) {
        errorMessage = 'Ë´ãÊ±ÇÂèÉÊï∏ÈåØË™§„ÄÇË´ãÊ™¢Êü•‰ΩçÁΩÆÂ∫ßÊ®ôÂíåÊêúÂ∞ãÈ°ûÂûãÊòØÂê¶Ê≠£Á¢∫';
      }
      
      return NextResponse.json(
        { 
          error: errorMessage,
          details: errorText,
          status: response.status
        },
        { status: response.status }
      );
    }

    const data = await response.json();

    // ËΩâÊèõÁÇ∫Á∞°ÂåñÊ†ºÂºè
    interface PlaceData {
      displayName?: { text?: string };
      location?: { latitude?: number; longitude?: number };
      types?: string[];
      formattedAddress?: string;
      rating?: number;
    }

    const places = (data.places as PlaceData[] | undefined)?.map((place) => ({
      name: place.displayName?.text || 'Unknown',
      location: {
        lat: place.location?.latitude,
        lng: place.location?.longitude,
      },
      types: place.types || [],
      address: place.formattedAddress || '',
      rating: place.rating || null,
    })) || [];

    return NextResponse.json({
      places,
      count: places.length,
      source: 'live',
    });

  } catch (error) {
    console.error('‚ùå Places API ‰ª£ÁêÜÈåØË™§:', error);
    return NextResponse.json(
      { error: 'ÂÖßÈÉ®‰º∫ÊúçÂô®ÈåØË™§' },
      { status: 500 }
    );
  }
}

function buildMockPlaces(
  location: { latitude: number; longitude: number },
  type: string[]
) {
  const baseTypes = type.length ? type : ['park'];
  const total = Math.max(4, baseTypes.length * 2);
  const radiusDeg = 0.01;

  return Array.from({ length: total }).map((_, index) => {
    const angle = (index / total) * Math.PI * 2;
    const selectedType = baseTypes[index % baseTypes.length];
    const lat = location.latitude + radiusDeg * Math.sin(angle);
    const lng = location.longitude + radiusDeg * Math.cos(angle);

    return {
      name: `Ê®°Êì¨${selectedType} #${index + 1}`,
      location: {
        lat: Number(lat.toFixed(6)),
        lng: Number(lng.toFixed(6)),
      },
      types: [selectedType, 'mock'],
      address: `Ê®°Êì¨Âú∞ÂùÄ ${index + 1}`,
      rating: Number((4 + (index % 3) * 0.3).toFixed(1)),
    };
  });
}
